//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace net.sf.robocode.host.proxies {
    
    
    #region Component Designer generated code 
    [global::net.sf.jni4net.attributes.JavaInterfaceAttribute()]
    public partial interface IHostingRobotProxy {
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("(LSystem/Object;LSystem/Object;)V")]
        void startRound(object par0, object par1);
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()V")]
        void forceStopThread();
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()V")]
        void waitForStopThread();
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()V")]
        void cleanup();
    }
    #endregion
    
    #region Component Designer generated code 
    public unsafe partial class IHostingRobotProxy_ {
        
        public new static global::java.lang.Class _class {
            get {
                return global::net.sf.robocode.host.proxies.@__IHostingRobotProxy.staticClass;
            }
        }
    }
    #endregion
    
    #region Component Designer generated code 
    [global::net.sf.jni4net.attributes.JavaProxyAttribute()]
    [global::net.sf.jni4net.attributes.ClrWrapperAttribute(typeof(global::net.sf.robocode.host.proxies.IHostingRobotProxy))]
    internal sealed unsafe partial class @__IHostingRobotProxy : global::java.lang.Object, global::net.sf.robocode.host.proxies.IHostingRobotProxy {
        
        internal static global::java.lang.Class staticClass;
        
        internal static global::net.sf.jni4net.jni.MethodId _startRound0;
        
        internal static global::net.sf.jni4net.jni.MethodId _forceStopThread1;
        
        internal static global::net.sf.jni4net.jni.MethodId _waitForStopThread2;
        
        internal static global::net.sf.jni4net.jni.MethodId _cleanup3;
        
        protected @__IHostingRobotProxy(global::net.sf.jni4net.jni.JNIEnv env) : 
                base(env) {
        }
        
        private static void InitJNI(global::net.sf.jni4net.jni.JNIEnv env, java.lang.Class staticClass) {
            global::net.sf.robocode.host.proxies.@__IHostingRobotProxy.staticClass = staticClass;
            global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._startRound0 = env.GetMethodID(global::net.sf.robocode.host.proxies.@__IHostingRobotProxy.staticClass, "startRound", "(Lnet/sf/robocode/peer/ExecCommands;Lrobocode/RobotStatus;)V");
            global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._forceStopThread1 = env.GetMethodID(global::net.sf.robocode.host.proxies.@__IHostingRobotProxy.staticClass, "forceStopThread", "()V");
            global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._waitForStopThread2 = env.GetMethodID(global::net.sf.robocode.host.proxies.@__IHostingRobotProxy.staticClass, "waitForStopThread", "()V");
            global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._cleanup3 = env.GetMethodID(global::net.sf.robocode.host.proxies.@__IHostingRobotProxy.staticClass, "cleanup", "()V");
        }
        
        public void startRound(object par0, object par1) {
            global::net.sf.jni4net.jni.JNIEnv env = this.Env;
            env.CallVoidMethod(this, global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._startRound0, new global::net.sf.jni4net.jni.Value(par0), new global::net.sf.jni4net.jni.Value(par1));
        }
        
        public void forceStopThread() {
            global::net.sf.jni4net.jni.JNIEnv env = this.Env;
            env.CallVoidMethod(this, global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._forceStopThread1);
        }
        
        public void waitForStopThread() {
            global::net.sf.jni4net.jni.JNIEnv env = this.Env;
            env.CallVoidMethod(this, global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._waitForStopThread2);
        }
        
        public void cleanup() {
            global::net.sf.jni4net.jni.JNIEnv env = this.Env;
            env.CallVoidMethod(this, global::net.sf.robocode.host.proxies.@__IHostingRobotProxy._cleanup3);
        }
        
        private static global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> @__Init(global::net.sf.jni4net.jni.JNIEnv env, global::java.lang.Class clazz) {
            global::System.Type type = typeof(__IHostingRobotProxy);
            global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod> methods = new global::System.Collections.Generic.List<global::net.sf.jni4net.jni.JNINativeMethod>();
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "startRound", "startRound0", "(Lnet/sf/robocode/peer/ExecCommands;Lrobocode/RobotStatus;)V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "forceStopThread", "forceStopThread1", "()V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "waitForStopThread", "waitForStopThread2", "()V"));
            methods.Add(global::net.sf.jni4net.jni.JNINativeMethod.Create(type, "cleanup", "cleanup3", "()V"));
            return methods;
        }
        
        private static void startRound0(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj, global::java.lang.Object.JavaPtr* par0, global::java.lang.Object.JavaPtr* par1) {
            // (Lnet/sf/robocode/peer/ExecCommands;Lrobocode/RobotStatus;)V
            // (LSystem/Object;LSystem/Object;)V
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::net.sf.robocode.host.proxies.IHostingRobotProxy real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::net.sf.robocode.host.proxies.IHostingRobotProxy>(__env, @__obj);
            real.startRound(global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.Object>(__env, par0), global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::System.Object>(__env, par1));
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
        }
        
        private static void forceStopThread1(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()V
            // ()V
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::net.sf.robocode.host.proxies.IHostingRobotProxy real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::net.sf.robocode.host.proxies.IHostingRobotProxy>(__env, @__obj);
            real.forceStopThread();
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
        }
        
        private static void waitForStopThread2(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()V
            // ()V
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::net.sf.robocode.host.proxies.IHostingRobotProxy real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::net.sf.robocode.host.proxies.IHostingRobotProxy>(__env, @__obj);
            real.waitForStopThread();
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
        }
        
        private static void cleanup3(global::net.sf.jni4net.jni.JNIEnv.JavaPtr* @__envi, global::java.lang.Object.JavaPtr* @__obj) {
            // ()V
            // ()V
            global::net.sf.jni4net.jni.JNIEnv @__env = (*@__envi).Wrap();
            try {
            global::net.sf.robocode.host.proxies.IHostingRobotProxy real = global::net.sf.jni4net.utils.ClrProxiesMap.ToClr<global::net.sf.robocode.host.proxies.IHostingRobotProxy>(__env, @__obj);
            real.cleanup();
            }catch (global::System.Exception ex){__env.ThrowExisting(ex);}
        }
        
        internal sealed class ContructionHelper : global::net.sf.jni4net.utils.IConstructionHelper {
            
            public global::net.sf.jni4net.jni.IJavaProxy CreateProxy(global::net.sf.jni4net.jni.JNIEnv env) {
                return new global::net.sf.robocode.host.proxies.@__IHostingRobotProxy(env);
            }
        }
    }
    #endregion
}
